--------------------------------------------------------
--  File created - Tuesday-December-26-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table TRANSACTION
--------------------------------------------------------

  CREATE TABLE "USER20"."TRANSACTION" 
   (	"TRANSACTION#" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ACCOUNT#" NUMBER(*,0), 
	"AMOUNT" NUMBER(19,4), 
	"ISSUEDATE" TIMESTAMP (6), 
	"LOCATION" VARCHAR2(255 BYTE), 
	"TYPE" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USER02" ;
REM INSERTING into USER20.TRANSACTION
SET DEFINE OFF;
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (4,3,2000.75,to_timestamp('10-DEC-23 09.20.19.293000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Online','Deposit');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (5,4,800,to_timestamp('10-DEC-23 09.20.19.356000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'ATM','Withdrawal');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (6,4,2000.25,to_timestamp('10-DEC-23 09.20.19.403000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Branch','Deposit');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (7,5,300,to_timestamp('10-DEC-23 09.20.19.465000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Online','Withdrawal');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (8,6,1000,to_timestamp('10-DEC-23 09.20.19.512000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'ATM','Deposit');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (9,7,120,to_timestamp('10-DEC-23 09.20.19.575000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Branch','Withdrawal');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (10,7,500,to_timestamp('10-DEC-23 09.20.19.637000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Online','Deposit');
Insert into USER20.TRANSACTION (TRANSACTION#,ACCOUNT#,AMOUNT,ISSUEDATE,LOCATION,TYPE) values (13,3,200,to_timestamp('10-DEC-23 09.22.22.206000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Online','Transfer');
--------------------------------------------------------
--  DDL for Index SYS_C0016581
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER20"."SYS_C0016581" ON "USER20"."TRANSACTION" ("TRANSACTION#") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USER02" ;
--------------------------------------------------------
--  DDL for Trigger TRANSACTIONTRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "USER20"."TRANSACTIONTRIGGER" 
AFTER INSERT ON Transaction
FOR EACH ROW
BEGIN
    -- Assuming the procedure is created in the same schema
    ProcessTransaction(:NEW.Account#, :NEW.Amount, :NEW.Location, :NEW.Type);
END;

/
ALTER TRIGGER "USER20"."TRANSACTIONTRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VALIDATEANDPROCESSTRANSACTION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "USER20"."VALIDATEANDPROCESSTRANSACTION" 
BEFORE INSERT ON Transaction
FOR EACH ROW
DECLARE
    v_sender_balance NUMBER(19, 4);
    v_receiver_balance NUMBER(19, 4);
BEGIN
    -- Retrieve the sender's account balance
    SELECT Balance INTO v_sender_balance
    FROM Account
    WHERE Account# = :NEW.Account#;

    -- Check if the sender's account exists
    IF v_sender_balance IS NULL THEN
        -- Sender account does not exist
        :NEW.Type := 'Invalid';
        :NEW.Location := 'N/A';
        :NEW.Amount := NULL;
        :NEW.IssueDate := NULL;
        :NEW.Type := 'Invalid';
        :NEW.Location := 'N/A';
        :NEW.Amount := NULL;
        :NEW.IssueDate := NULL;
        :NEW.Account# := NULL;

        DBMS_OUTPUT.PUT_LINE('Error: Sender account does not exist');
        RAISE_APPLICATION_ERROR(-20001, 'Sender account does not exist');
        RETURN;
    END IF;

    -- Check the transaction type and update the account balance accordingly
    CASE :NEW.Type
        WHEN 'Deposit' THEN
            -- Deposit: Increase the account balance
            :NEW.Amount := ABS(:NEW.Amount); -- Ensure the amount is positive
            :NEW.IssueDate := CURRENT_TIMESTAMP;
            :NEW.Location := NVL(:NEW.Location, 'Unknown');
            :NEW.Account# := :NEW.Account#; -- Keep the same account number
            :NEW.Type := 'Deposit';
            :NEW.Amount := :NEW.Amount; -- Keep the same amount

        WHEN 'Withdrawal' THEN
            -- Withdrawal: Decrease the account balance
            IF v_sender_balance - :NEW.Amount < 0 THEN
                -- Insufficient funds
                :NEW.Type := 'Invalid';
                :NEW.Location := 'N/A';
                :NEW.Amount := NULL;
                :NEW.IssueDate := NULL;
                :NEW.Type := 'Invalid';
                :NEW.Location := 'N/A';
                :NEW.Amount := NULL;
                :NEW.IssueDate := NULL;
                :NEW.Account# := NULL;

                DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds for withdrawal');
                RAISE_APPLICATION_ERROR(-20002, 'Insufficient funds for withdrawal');
                RETURN;
            END IF;

            :NEW.Amount := -ABS(:NEW.Amount); -- Ensure the amount is negative
            :NEW.IssueDate := CURRENT_TIMESTAMP;
            :NEW.Location := NVL(:NEW.Location, 'Unknown');
            :NEW.Account# := :NEW.Account#; -- Keep the same account number
            :NEW.Type := 'Withdrawal';
            :NEW.Amount := :NEW.Amount; -- Keep the same amount

        WHEN 'Transfer' THEN
            -- Transfer: Decrease the sender's account balance and increase the receiver's account balance
            DECLARE
                v_receiver_balance NUMBER(19, 4);
            BEGIN
                -- Retrieve the receiver's account balance
                SELECT Balance INTO v_receiver_balance
                FROM Account
                WHERE Account# = :NEW.ReceiverAccount#;

                -- Check if the receiver's account exists
                IF v_receiver_balance IS NULL THEN
                    -- Receiver account does not exist
                    :NEW.Type := 'Invalid';
                    :NEW.Location := 'N/A';
                    :NEW.Amount := NULL;
                    :NEW.IssueDate := NULL;
                    :NEW.Type := 'Invalid';
                    :NEW.Location := 'N/A';
                    :NEW.Amount := NULL;
                    :NEW.IssueDate := NULL;
                    :NEW.Account# := NULL;

                    DBMS_OUTPUT.PUT_LINE('Error: Receiver account does not exist');
                    RAISE_APPLICATION_ERROR(-20003, 'Receiver account does not exist');
                    RETURN;
                END IF;

                -- Check if the sender has sufficient funds
               IF v_sender_balance - :NEW.Amount < 0 THEN
                    -- Insufficient funds
                    :NEW.Type := 'Invalid';
                    :NEW.Location := 'N/A';
                    :NEW.Amount := NULL;
                    :NEW.IssueDate := NULL;
                    :NEW.Type := 'Invalid';
                    :NEW.Location := 'N/A';
                    :NEW.Amount := NULL;
                    :NEW.IssueDate := NULL;
                    :NEW.Account# := NULL;

                    DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds for transfer');
                    RAISE_APPLICATION_ERROR(-20004, 'Insufficient funds for transfer');
                    RETURN;
                END IF;

                -- Update the sender's account balance (decrease)
                UPDATE Account
                SET Balance = Balance - ABS(:NEW.Amount)
                WHERE Account# = :NEW.Account#;

                -- Update the receiver's account balance (increase)
                UPDATE Account
                SET Balance = Balance + ABS(:NEW.Amount)
                WHERE Account# = :NEW.AccountReceiver;
            END;

            :NEW.IssueDate := CURRENT_TIMESTAMP;
            :NEW.Location := NVL(:NEW.Location, 'Unknown');
            :NEW.Type := 'Transfer';
            :NEW.Amount := :NEW.Amount; -- Keep the same amount

        ELSE
            -- Invalid transaction type
            :NEW.Type := 'Invalid';
            :NEW.Location := 'N/A';
            :NEW.Amount := NULL;
            :NEW.IssueDate := NULL;
            :NEW.Type := 'Invalid';
            :NEW.Location := 'N/A';
            :NEW.Amount := NULL;
            :NEW.IssueDate := NULL;
            :NEW.Account# := NULL;

            DBMS_OUTPUT.PUT_LINE('Error: Invalid transaction type');
            RAISE_APPLICATION_ERROR(-20005, 'Invalid transaction type');
            RETURN;
    END CASE;

    -- Commit the changes to maintain transaction consistency
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Transaction processed successfully');
EXCEPTION
    WHEN OTHERS THEN
        -- An unexpected error occurred, handle the error

        -- Rollback the transaction to ensure data consistency
        ROLLBACK;

        -- Log or print the error message
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);

        -- Raise an exception or take appropriate action
        RAISE;
END;

/
ALTER TRIGGER "USER20"."VALIDATEANDPROCESSTRANSACTION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSACTIONCONTROL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "USER20"."TRANSACTIONCONTROL" 
BEFORE INSERT ON Transaction
FOR EACH ROW
DECLARE
    v_customer_id INT;
BEGIN
    -- Replace the condition in the WHERE clause based on your data
    SELECT Customer_id INTO v_customer_id
    FROM Account
    WHERE Account# = :NEW.Account# AND ROWNUM = 1;

    -- Check if the customer exists
    IF v_customer_id IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer not found for Account# ' || :NEW.Account#);
        RAISE_APPLICATION_ERROR(-20001, 'Customer not found for Account# ' || :NEW.Account#);
    END IF;

    -- Your other trigger logic goes here
END;

/
ALTER TRIGGER "USER20"."TRANSACTIONCONTROL" ENABLE;
--------------------------------------------------------
--  Constraints for Table TRANSACTION
--------------------------------------------------------

  ALTER TABLE "USER20"."TRANSACTION" MODIFY ("TRANSACTION#" NOT NULL ENABLE);
  ALTER TABLE "USER20"."TRANSACTION" MODIFY ("ACCOUNT#" NOT NULL ENABLE);
  ALTER TABLE "USER20"."TRANSACTION" ADD PRIMARY KEY ("TRANSACTION#")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USER02"  ENABLE;
  ALTER TABLE "USER20"."TRANSACTION" ADD CONSTRAINT "CHECKTRANSACTIONTYPE" CHECK (Type IN ('Deposit', 'Withdrawal', 'Transfer')) ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRANSACTION
--------------------------------------------------------

  ALTER TABLE "USER20"."TRANSACTION" ADD FOREIGN KEY ("ACCOUNT#")
	  REFERENCES "USER20"."ACCOUNT" ("ACCOUNT#") ENABLE;
